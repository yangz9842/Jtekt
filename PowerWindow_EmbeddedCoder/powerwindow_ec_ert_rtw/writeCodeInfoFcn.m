% Autogenerated file: Mon Mar 31 18:22:11 2025
function writeCodeInfoFcn


% Load a ComponentInterface object from IR
codeIRInfoStruct = load('tlc\codeIRInfo.mat');
codeInfo = codeIRInfoStruct.codeInfo;

prmIdxMap = containers.Map;




wr = coder.internal.writeDataInterfacesToCodeDescriptor("powerwindow_ec",pwd) ;
wr.writeName(codeInfo.Name);


                
    % Built-In Type: 8
        Type_8_R0_V0_C0 = coder.types.Bool;
        Type_8_R0_V0_C0.Name = 'boolean';
    Type_8_R0_V0_C0.Identifier = 'boolean_T';
    Type_8_R0_V0_C0.ReadOnly   = 0;
    Type_8_R0_V0_C0.Volatile   = 0;
        
        % Variable: Var_driver_up
        Var_driver_up = RTW.Variable(Type_8_R0_V0_C0, 'driver_up');
        Var_driver_up.Owner           = 'powerwindow_ec';
        Var_driver_up.DeclarationFile = 'powerwindow_ec.h';
            Var_driver_up.DefinitionFile  = 'powerwindow_ec.c';
        

                        Var_driver_up.StorageSpecifier = 'extern';
                        Var_driver_up.CodeType = Type_8_R0_V0_C0;

            % Setting Inport#1's implementation
            codeInfo.Inports(1).Implementation = Var_driver_up;
            wr.writeRootInport(Var_driver_up, codeInfo.Inports(1));



        % Variable: Var_driver_down
        Var_driver_down = RTW.Variable(Type_8_R0_V0_C0, 'driver_down');
        Var_driver_down.Owner           = 'powerwindow_ec';
        Var_driver_down.DeclarationFile = 'powerwindow_ec.h';
            Var_driver_down.DefinitionFile  = 'powerwindow_ec.c';
        

                        Var_driver_down.StorageSpecifier = 'extern';
                        Var_driver_down.CodeType = Type_8_R0_V0_C0;

            % Setting Inport#2's implementation
            codeInfo.Inports(2).Implementation = Var_driver_down;
            wr.writeRootInport(Var_driver_down, codeInfo.Inports(2));



        % Variable: Var_passenger_up
        Var_passenger_up = RTW.Variable(Type_8_R0_V0_C0, 'passenger_up');
        Var_passenger_up.Owner           = 'powerwindow_ec';
        Var_passenger_up.DeclarationFile = 'powerwindow_ec.h';
            Var_passenger_up.DefinitionFile  = 'powerwindow_ec.c';
        

                        Var_passenger_up.StorageSpecifier = 'extern';
                        Var_passenger_up.CodeType = Type_8_R0_V0_C0;

            % Setting Inport#3's implementation
            codeInfo.Inports(3).Implementation = Var_passenger_up;
            wr.writeRootInport(Var_passenger_up, codeInfo.Inports(3));



        % Variable: Var_passenger_down
        Var_passenger_down = RTW.Variable(Type_8_R0_V0_C0, 'passenger_down');
        Var_passenger_down.Owner           = 'powerwindow_ec';
        Var_passenger_down.DeclarationFile = 'powerwindow_ec.h';
            Var_passenger_down.DefinitionFile  = 'powerwindow_ec.c';
        

                        Var_passenger_down.StorageSpecifier = 'extern';
                        Var_passenger_down.CodeType = Type_8_R0_V0_C0;

            % Setting Inport#4's implementation
            codeInfo.Inports(4).Implementation = Var_passenger_down;
            wr.writeRootInport(Var_passenger_down, codeInfo.Inports(4));


                
    % Fixed-Point Type
    Type_17_R0_V0_C0 = coder.types.Fixed;
    Type_17_R0_V0_C0.Signedness = 0;
    Type_17_R0_V0_C0.WordLength = 16;
            Type_17_R0_V0_C0.DataTypeMode = 'Fixed-point: slope and bias scaling';
        Type_17_R0_V0_C0.Bias                  = 0.0;
        Type_17_R0_V0_C0.SlopeAdjustmentFactor = 1.024;
        Type_17_R0_V0_C0.FixedExponent         = -10;
    Type_17_R0_V0_C0.Identifier = 'uint16_T';
    Type_17_R0_V0_C0.Name       = 'ufix16_Sp001';
    Type_17_R0_V0_C0.ReadOnly   = 0;
    Type_17_R0_V0_C0.Volatile   = 0;
            Type_17_R0_V0_C0.TypeChecksum   = uint32([0.0; 0.0; 0.0; 0.0]);

                        
    % Built-In Type: 5
        Type_5_R0_V0_C0 = coder.types.Int(16,0);
        Type_5_R0_V0_C0.Name = 'uint16';
    Type_5_R0_V0_C0.Identifier = 'uint16_T';
    Type_5_R0_V0_C0.ReadOnly   = 0;
    Type_5_R0_V0_C0.Volatile   = 0;
        
        % Variable: Var_obstacle_position
        Var_obstacle_position = RTW.Variable(Type_17_R0_V0_C0, 'obstacle_position');
        Var_obstacle_position.Owner           = 'powerwindow_ec';
        Var_obstacle_position.DeclarationFile = 'powerwindow_ec.h';
            Var_obstacle_position.DefinitionFile  = 'powerwindow_ec.c';
        

                        Var_obstacle_position.StorageSpecifier = 'extern';
                        Var_obstacle_position.CodeType = Type_5_R0_V0_C0;

            % Setting Inport#5's implementation
            codeInfo.Inports(5).Implementation = Var_obstacle_position;
            wr.writeRootInport(Var_obstacle_position, codeInfo.Inports(5));



        % Variable: Var_window_position
        Var_window_position = RTW.Variable(Type_17_R0_V0_C0, 'window_position');
        Var_window_position.Owner           = 'powerwindow_ec';
        Var_window_position.DeclarationFile = 'powerwindow_ec.h';
            Var_window_position.DefinitionFile  = 'powerwindow_ec.c';
        

                        Var_window_position.StorageSpecifier = 'extern';
                        Var_window_position.CodeType = Type_5_R0_V0_C0;

            % Setting Inport#6's implementation
            codeInfo.Inports(6).Implementation = Var_window_position;
            wr.writeRootInport(Var_window_position, codeInfo.Inports(6));






        % Variable: Var_obstacle_detection
        Var_obstacle_detection = RTW.Variable(Type_8_R0_V0_C0, 'obstacle_detection');
        Var_obstacle_detection.Owner           = 'powerwindow_ec';
        Var_obstacle_detection.DeclarationFile = 'powerwindow_ec.h';
            Var_obstacle_detection.DefinitionFile  = 'powerwindow_ec.c';
        
                        Var_obstacle_detection.StorageSpecifier = 'extern';
                        Var_obstacle_detection.CodeType = Type_8_R0_V0_C0;

            % Setting Outport#1's Implementation
            codeInfo.Outports(1).Implementation = Var_obstacle_detection;
            wr.writeRootOutport(Var_obstacle_detection, codeInfo.Outports(1));




        % Variable: Var_move_up
        Var_move_up = RTW.Variable(Type_8_R0_V0_C0, 'move_up');
        Var_move_up.Owner           = 'powerwindow_ec';
        Var_move_up.DeclarationFile = 'powerwindow_ec.h';
            Var_move_up.DefinitionFile  = 'powerwindow_ec.c';
        
                        Var_move_up.StorageSpecifier = 'extern';
                        Var_move_up.CodeType = Type_8_R0_V0_C0;

            % Setting Outport#2's Implementation
            codeInfo.Outports(2).Implementation = Var_move_up;
            wr.writeRootOutport(Var_move_up, codeInfo.Outports(2));




        % Variable: Var_move_down
        Var_move_down = RTW.Variable(Type_8_R0_V0_C0, 'move_down');
        Var_move_down.Owner           = 'powerwindow_ec';
        Var_move_down.DeclarationFile = 'powerwindow_ec.h';
            Var_move_down.DefinitionFile  = 'powerwindow_ec.c';
        
                        Var_move_down.StorageSpecifier = 'extern';
                        Var_move_down.CodeType = Type_8_R0_V0_C0;

            % Setting Outport#3's Implementation
            codeInfo.Outports(3).Implementation = Var_move_down;
            wr.writeRootOutport(Var_move_down, codeInfo.Outports(3));

skippedParameters = [];



                    checkDataGraphicalNames(codeInfo.Parameters(1).GraphicalName, 'position_endstop_top');



                            
    % Fixed-Point Type
    Type_17_R1_V1_C0 = coder.types.Fixed;
    Type_17_R1_V1_C0.Signedness = 0;
    Type_17_R1_V1_C0.WordLength = 16;
            Type_17_R1_V1_C0.DataTypeMode = 'Fixed-point: slope and bias scaling';
        Type_17_R1_V1_C0.Bias                  = 0.0;
        Type_17_R1_V1_C0.SlopeAdjustmentFactor = 1.024;
        Type_17_R1_V1_C0.FixedExponent         = -10;
    Type_17_R1_V1_C0.Identifier = 'uint16_T';
    Type_17_R1_V1_C0.Name       = 'ufix16_Sp001';
    Type_17_R1_V1_C0.ReadOnly   = 1;
    Type_17_R1_V1_C0.Volatile   = 1;
            Type_17_R1_V1_C0.TypeChecksum   = uint32([0.0; 0.0; 0.0; 0.0]);

        
    % Matrix Type
    Type_30_R1_V1_C0 = coder.types.Matrix;
    Type_30_R1_V1_C0.BaseType   = Type_17_R1_V1_C0;
        Type_30_R1_V1_C0.Dimensions = [1,1];
        Type_30_R1_V1_C0.SymbolicDimensions = Type_30_R1_V1_C0.SymbolicDimensions;
                                    
    % Built-In Type: 5
        Type_5_R1_V1_C0 = coder.types.Int(16,0);
        Type_5_R1_V1_C0.Name = 'uint16';
    Type_5_R1_V1_C0.Identifier = 'uint16_T';
    Type_5_R1_V1_C0.ReadOnly   = 1;
    Type_5_R1_V1_C0.Volatile   = 1;
        
    % Matrix Type
    Type_25_R1_V1_C1 = coder.types.Matrix;
    Type_25_R1_V1_C1.BaseType   = Type_5_R1_V1_C0;
        Type_25_R1_V1_C1.Dimensions = [1];
        Type_25_R1_V1_C1.SymbolicDimensions = Type_25_R1_V1_C1.SymbolicDimensions;
        
        % Variable: Var_Par0
        Var_Par0 = RTW.Variable(Type_30_R1_V1_C0, 'position_endstop_top');
        Var_Par0.Owner           = 'powerwindow_ec';
        Var_Par0.DeclarationFile = 'powerwindow_ec.h';
            Var_Par0.DefinitionFile  = 'powerwindow_ec.c';
        
                                Var_Par0.StorageSpecifier = 'extern';

            % Setting Parameter#1's implementation
            codeInfo.Parameters(1).Implementation = Var_Par0;
                codeInfo.Parameters(1).Implementation.CodeType = Type_25_R1_V1_C1;
            wr.writeParameter(Var_Par0, codeInfo.Parameters(1).GraphicalName, codeInfo.Parameters(1).SID);




                    checkDataGraphicalNames(codeInfo.Parameters(2).GraphicalName, 'bFALSE');



                        skippedParameters(end+1) = 2;



                    checkDataGraphicalNames(codeInfo.Parameters(3).GraphicalName, 'auto_down_time');



                            
    % Built-In Type: 3
        Type_3_R1_V1_C0 = coder.types.Int(8,0);
        Type_3_R1_V1_C0.Name = 'uint8';
    Type_3_R1_V1_C0.Identifier = 'uint8_T';
    Type_3_R1_V1_C0.ReadOnly   = 1;
    Type_3_R1_V1_C0.Volatile   = 1;
        
    % Matrix Type
    Type_26_R1_V1_C0 = coder.types.Matrix;
    Type_26_R1_V1_C0.BaseType   = Type_3_R1_V1_C0;
        Type_26_R1_V1_C0.Dimensions = [1,1];
        Type_26_R1_V1_C0.SymbolicDimensions = Type_26_R1_V1_C0.SymbolicDimensions;
                    
    % Matrix Type
    Type_27_R1_V1_C1 = coder.types.Matrix;
    Type_27_R1_V1_C1.BaseType   = Type_3_R1_V1_C0;
        Type_27_R1_V1_C1.Dimensions = [1];
        Type_27_R1_V1_C1.SymbolicDimensions = Type_27_R1_V1_C1.SymbolicDimensions;
        
        % Variable: Var_Par2
        Var_Par2 = RTW.Variable(Type_26_R1_V1_C0, 'auto_down_time');
        Var_Par2.Owner           = 'powerwindow_ec';
        Var_Par2.DeclarationFile = 'powerwindow_ec.h';
            Var_Par2.DefinitionFile  = 'powerwindow_ec.c';
        
                                Var_Par2.StorageSpecifier = 'extern';

            % Setting Parameter#3's implementation
            codeInfo.Parameters(3).Implementation = Var_Par2;
                codeInfo.Parameters(3).Implementation.CodeType = Type_27_R1_V1_C1;
            wr.writeParameter(Var_Par2, codeInfo.Parameters(3).GraphicalName, codeInfo.Parameters(3).SID);




                    checkDataGraphicalNames(codeInfo.Parameters(4).GraphicalName, 'auto_up_time');




        % Variable: Var_Par3
        Var_Par3 = RTW.Variable(Type_26_R1_V1_C0, 'auto_up_time');
        Var_Par3.Owner           = 'powerwindow_ec';
        Var_Par3.DeclarationFile = 'powerwindow_ec.h';
            Var_Par3.DefinitionFile  = 'powerwindow_ec.c';
        
                                Var_Par3.StorageSpecifier = 'extern';

            % Setting Parameter#4's implementation
            codeInfo.Parameters(4).Implementation = Var_Par3;
                codeInfo.Parameters(4).Implementation.CodeType = Type_27_R1_V1_C1;
            wr.writeParameter(Var_Par3, codeInfo.Parameters(4).GraphicalName, codeInfo.Parameters(4).SID);




                    checkDataGraphicalNames(codeInfo.Parameters(5).GraphicalName, 'emergency_down_time');




        % Variable: Var_Par4
        Var_Par4 = RTW.Variable(Type_26_R1_V1_C0, 'emergency_down_time');
        Var_Par4.Owner           = 'powerwindow_ec';
        Var_Par4.DeclarationFile = 'powerwindow_ec.h';
            Var_Par4.DefinitionFile  = 'powerwindow_ec.c';
        
                                Var_Par4.StorageSpecifier = 'extern';

            % Setting Parameter#5's implementation
            codeInfo.Parameters(5).Implementation = Var_Par4;
                codeInfo.Parameters(5).Implementation.CodeType = Type_27_R1_V1_C1;
            wr.writeParameter(Var_Par4, codeInfo.Parameters(5).GraphicalName, codeInfo.Parameters(5).SID);





                


        % Variable: Var_prev_move_up
        Var_prev_move_up = RTW.Variable(Type_8_R0_V0_C0, 'prev_move_up');
        Var_prev_move_up.Owner           = 'powerwindow_ec';
        Var_prev_move_up.DeclarationFile = 'powerwindow_ec.h';
            Var_prev_move_up.DefinitionFile  = 'powerwindow_ec.c';
        

                    Var_prev_move_up.StorageSpecifier = 'extern';
                    Var_prev_move_up.CodeType = Type_8_R0_V0_C0;
                wr.writeExternalBlockOutput(Var_prev_move_up, 0);


                


        % Variable: Var_passenger_validated_down
        Var_passenger_validated_down = RTW.Variable(Type_8_R0_V0_C0, 'passenger_validated_down');
        Var_passenger_validated_down.Owner           = 'powerwindow_ec';
        Var_passenger_validated_down.DeclarationFile = 'powerwindow_ec.h';
            Var_passenger_validated_down.DefinitionFile  = 'powerwindow_ec.c';
        

                    Var_passenger_validated_down.StorageSpecifier = 'extern';
                    Var_passenger_validated_down.CodeType = Type_8_R0_V0_C0;
                wr.writeExternalBlockOutput(Var_passenger_validated_down, 1);


                


        % Variable: Var_passenger_validated_up
        Var_passenger_validated_up = RTW.Variable(Type_8_R0_V0_C0, 'passenger_validated_up');
        Var_passenger_validated_up.Owner           = 'powerwindow_ec';
        Var_passenger_validated_up.DeclarationFile = 'powerwindow_ec.h';
            Var_passenger_validated_up.DefinitionFile  = 'powerwindow_ec.c';
        

                    Var_passenger_validated_up.StorageSpecifier = 'extern';
                    Var_passenger_validated_up.CodeType = Type_8_R0_V0_C0;
                wr.writeExternalBlockOutput(Var_passenger_validated_up, 2);


                


        % Variable: Var_passenger_validated_neutral
        Var_passenger_validated_neutral = RTW.Variable(Type_8_R0_V0_C0, 'passenger_validated_neutral');
        Var_passenger_validated_neutral.Owner           = 'powerwindow_ec';
        Var_passenger_validated_neutral.DeclarationFile = 'powerwindow_ec.h';
            Var_passenger_validated_neutral.DefinitionFile  = 'powerwindow_ec.c';
        

                    Var_passenger_validated_neutral.StorageSpecifier = 'extern';
                    Var_passenger_validated_neutral.CodeType = Type_8_R0_V0_C0;
                wr.writeExternalBlockOutput(Var_passenger_validated_neutral, 3);


                


        % Variable: Var_driver_validated_down
        Var_driver_validated_down = RTW.Variable(Type_8_R0_V0_C0, 'driver_validated_down');
        Var_driver_validated_down.Owner           = 'powerwindow_ec';
        Var_driver_validated_down.DeclarationFile = 'powerwindow_ec.h';
            Var_driver_validated_down.DefinitionFile  = 'powerwindow_ec.c';
        

                    Var_driver_validated_down.StorageSpecifier = 'extern';
                    Var_driver_validated_down.CodeType = Type_8_R0_V0_C0;
                wr.writeExternalBlockOutput(Var_driver_validated_down, 4);


                


        % Variable: Var_driver_validated_up
        Var_driver_validated_up = RTW.Variable(Type_8_R0_V0_C0, 'driver_validated_up');
        Var_driver_validated_up.Owner           = 'powerwindow_ec';
        Var_driver_validated_up.DeclarationFile = 'powerwindow_ec.h';
            Var_driver_validated_up.DefinitionFile  = 'powerwindow_ec.c';
        

                    Var_driver_validated_up.StorageSpecifier = 'extern';
                    Var_driver_validated_up.CodeType = Type_8_R0_V0_C0;
                wr.writeExternalBlockOutput(Var_driver_validated_up, 5);


                


        % Variable: Var_driver_validated_neutral
        Var_driver_validated_neutral = RTW.Variable(Type_8_R0_V0_C0, 'driver_validated_neutral');
        Var_driver_validated_neutral.Owner           = 'powerwindow_ec';
        Var_driver_validated_neutral.DeclarationFile = 'powerwindow_ec.h';
            Var_driver_validated_neutral.DefinitionFile  = 'powerwindow_ec.c';
        

                    Var_driver_validated_neutral.StorageSpecifier = 'extern';
                    Var_driver_validated_neutral.CodeType = Type_8_R0_V0_C0;
                wr.writeExternalBlockOutput(Var_driver_validated_neutral, 6);


                


        % Variable: Var_endstop_bottom
        Var_endstop_bottom = RTW.Variable(Type_8_R0_V0_C0, 'endstop_bottom');
        Var_endstop_bottom.Owner           = 'powerwindow_ec';
        Var_endstop_bottom.DeclarationFile = 'powerwindow_ec.h';
            Var_endstop_bottom.DefinitionFile  = 'powerwindow_ec.c';
        

                    Var_endstop_bottom.StorageSpecifier = 'extern';
                    Var_endstop_bottom.CodeType = Type_8_R0_V0_C0;
                wr.writeExternalBlockOutput(Var_endstop_bottom, 7);


                


        % Variable: Var_endstop_top
        Var_endstop_top = RTW.Variable(Type_8_R0_V0_C0, 'endstop_top');
        Var_endstop_top.Owner           = 'powerwindow_ec';
        Var_endstop_top.DeclarationFile = 'powerwindow_ec.h';
            Var_endstop_top.DefinitionFile  = 'powerwindow_ec.c';
        

                    Var_endstop_top.StorageSpecifier = 'extern';
                    Var_endstop_top.CodeType = Type_8_R0_V0_C0;
                wr.writeExternalBlockOutput(Var_endstop_top, 8);


                


                    Var_obstacle_detection.StorageSpecifier = 'extern';
                    Var_obstacle_detection.CodeType = Type_8_R0_V0_C0;
                wr.writeExternalBlockOutput(Var_obstacle_detection, 9);


                


                    Var_move_down.StorageSpecifier = 'extern';
                    Var_move_down.CodeType = Type_8_R0_V0_C0;
                wr.writeExternalBlockOutput(Var_move_down, 10);


                


                    Var_move_up.StorageSpecifier = 'extern';
                    Var_move_up.CodeType = Type_8_R0_V0_C0;
                wr.writeExternalBlockOutput(Var_move_up, 11);


            























































            tmpArgs         = [];
    tmpActualArgs   = [];
    tmpRet          = coder.types.Argument.empty;
    tmpActualReturn = RTW.DataInterface.empty;


    func_Initialize_Prototype = coder.types.Prototype;
    func_Initialize_Prototype.Arguments  = tmpArgs;
    func_Initialize_Prototype.Return     = tmpRet;

        func_Initialize_Prototype.HeaderFile = 'powerwindow_ec.h';
    func_Initialize_Prototype.SourceFile = 'powerwindow_ec.c';

    func_Initialize_Interface = RTW.FunctionInterface;
    func_Initialize_Interface.Prototype    = func_Initialize_Prototype;
    func_Initialize_Interface.ActualArgs   = tmpActualArgs;
    func_Initialize_Interface.ActualReturn = tmpActualReturn;

        func_Initialize_Prototype.Name = 'powerwindow_ec_initialize';
    time_constant = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, -1));
        func_Initialize_Interface.Timing = time_constant;
        codeInfo.InitializeFunctions =  [codeInfo.InitializeFunctions, func_Initialize_Interface'];
        func_Initialize_Interface.IsInitializeFunction = true;

                            tmpArgs         = [];
    tmpActualArgs   = [];
    tmpRet          = coder.types.Argument.empty;
    tmpActualReturn = RTW.DataInterface.empty;


            





    func_OutputUpdate_Prototype = coder.types.Prototype;
    func_OutputUpdate_Prototype.Arguments  = tmpArgs;
    func_OutputUpdate_Prototype.Return     = tmpRet;

        func_OutputUpdate_Prototype.HeaderFile = 'powerwindow_ec.h';
    func_OutputUpdate_Prototype.SourceFile = 'powerwindow_ec.c';

    func_OutputUpdate_Interface = RTW.FunctionInterface;
    func_OutputUpdate_Interface.Prototype    = func_OutputUpdate_Prototype;
    func_OutputUpdate_Interface.ActualArgs   = tmpActualArgs;
    func_OutputUpdate_Interface.ActualReturn = tmpActualReturn;

            func_OutputUpdate_Prototype.Name = 'powerwindow_ec_step';
    time_0 = codeInfo.TimingProperties(getIndexFromTimingInternalId(codeInfo.TimingInternalIds, 0));
        func_OutputUpdate_Interface.Timing = time_0;
        codeInfo.OutputFunctions =  [codeInfo.OutputFunctions, func_OutputUpdate_Interface'];

                    
                



    




            % Opaque Data Type
            type_RTModel  = coder.types.Opaque;
            type_RTModel.Identifier = 'RT_MODEL_powerwindow_ec_T';
            

        % Pointer Type: Pointer to type_RTModel
        Ptrtype_RTModel_1_0 = coder.types.Pointer;
            Ptrtype_RTModel_1_0.BaseType = type_RTModel;
        Ptrtype_RTModel_1_0.ReadOnly = 1;
        Ptrtype_RTModel_1_0.Volatile = 0;
        




        % Variable: Var_RTModel
        Var_RTModel = RTW.Variable(Ptrtype_RTModel_1_0.BaseType, 'powerwindow_ec_M_');
        Var_RTModel.Owner           = 'powerwindow_ec';
        Var_RTModel.DeclarationFile = 'powerwindow_ec.h';
            Var_RTModel.DefinitionFile  = 'powerwindow_ec.c';
        

        % Pointer Variable: PtrVar_RTModel
        PtrVar_RTModel = RTW.PointerVariable(Ptrtype_RTModel_1_0, 'powerwindow_ec_M', Var_RTModel);
        
        PtrVar_RTModel.Owner = Var_RTModel.Owner;
            PtrVar_RTModel.DeclarationFile = Var_RTModel.DeclarationFile;
            PtrVar_RTModel.DefinitionFile = Var_RTModel.DefinitionFile;

        % Data Interface: idata_RTModel
            empty_timing = RTW.TimingInterface.empty;
        idata_RTModel = RTW.DataInterface('', 'RTModel', PtrVar_RTModel, empty_timing);
        









    










        

        
            





            




        

        wr.writeSubsystemFileInformation('567', 'detect_obstacle_endstop.h', 'detect_obstacle_endstop.c');







        

        
            





            




        

        wr.writeSubsystemFileInformation('466', 'validate_driver.h', 'validate_driver.c');







        

        
            





            




        

        wr.writeSubsystemFileInformation('397', 'validate_passenger.h', 'validate_passenger.c');

















if ~isempty(skippedParameters)
wr.removeSkippedParameters(codeInfo.Parameters(skippedParameters));
codeInfo.Parameters(skippedParameters) = [];
end

        codeInfo.InternalData = [codeInfo.InternalData, idata_RTModel];
    wr.addInternalData(idata_RTModel);

% Handling Right-Click Builds
ss = rtwprivate('getSourceSubsystemHandle',codeInfo.GraphicalPath);
% Check if Rt-Click build, then re-map SIDs
if ~isempty(ss) && rtwprivate('rtwattic','hasSIDMap')
codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo, wr);
end

wr.writeFunctionInterfaces(codeInfo);
wr.writeServerCallPoints(codeInfo);



wr.closeRepo();
    if exist('expInports', 'var')
    save codeInfo.mat codeInfo expInports;
    else
    save codeInfo.mat codeInfo;
    end
returnVal = 1;

% End Function: writeCodeInfoFcn

function data = uniquifyDataAccess(list)
data = RTW.DataInterface.empty;
for idx=1:numel(list)
if ~isPresentDI(data, list(idx))
data(end+1) = list(idx); %#ok<AGROW>
end
end
% End Function: uniquifyDataAccess

function isPresent = isPresentDI(list, di)
isPresent = false;
for idx = 1:numel(list)
if isequal(list(idx), di)
isPresent = true;
break
end
end

function idx = getIndexFromTimingInternalId(internalIdVec, internalId)
idx = find(internalIdVec == internalId);
if (isempty(idx) || (length(idx) > 1))
ciMsg = 'Time object cannot be empty';
ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
throw(ciExc);
end
% End Function: getIndexFromTimingInternalId

function checkDataGraphicalNames(ciName, rtwName)
if (strcmp(ciName, rtwName) ~= 1)
ciMsg = ['Name mismatch: ', ciName, ' and ', rtwName];
ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
throw(ciExc);
end
% End Function: checkDataGraphicalNames

function iData = getInternalDataByName(iDataVec, iDataName)
iData = RTW.DataInterface.empty;
for idxData = 1:numel(iDataVec)
if strcmp(iDataName, iDataVec(idxData).GraphicalName)
iData(end+1) = iDataVec(idxData);
break
end
end
if (isempty(iData) || (length(iData) > 1))
ciMsg = 'Internal Data object cannot be empty';
ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
throw(ciExc);
end
% End Function: getInternalDataByName

function iData = getInternalDataByVariableName(iDataVec, iDataVariableName)
iData = RTW.DataInterface.empty;
for idxData = 1:numel(iDataVec)
if strcmp(iDataVariableName, iDataVec(idxData).Implementation.VariableName)
iData = iDataVec(idxData);
break
end
end
if isempty(iData)
ciMsg = 'Internal Data object cannot be empty';
ciExc = MException('RTW:buildProcess:CodeInfoInternalError',ciMsg);
throw(ciExc);
end
% End Function: getInternalDataByVariableName

function codeInfo = modifyCodeInfoForSubsystemBuild(ss, codeInfo, wr)
    % Extract Subsystem Build Map from AtticData
    Subsystem_Build_Mapping = rtwprivate('rtwattic','getSIDMap');

    % Parameters
    for i = 1:length(codeInfo.Parameters)
    sid = codeInfo.Parameters(i).SID;

    sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
    wr.updateSIDForSubsystemBuild("Parameter", i, sid, codeInfo.Parameters(i));
    codeInfo.Parameters(i).SID = sid;
    end

    % Data Stores
    for i = 1:length(codeInfo.DataStores)
    sid = codeInfo.DataStores(i).SID;

    sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
    codeInfo.DataStores(i).SID = sid;
    wr.updateSIDForSubsystemBuild("DataStore", i, sid);

    end

    % Inports
    for i = 1:length(codeInfo.Inports)
    sid = codeInfo.Inports(i).SID;

    sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
    codeInfo.Inports(i).SID = sid;
    wr.updateSIDForSubsystemBuild("Inport", i, sid);

    end

    % Outports
    for i = 1:length(codeInfo.Outports)
    sid = codeInfo.Outports(i).SID;

    sid = Simulink.ID.getSubsystemBuildSID(sid,ss, Subsystem_Build_Mapping);
    codeInfo.Outports(i).SID = sid;
    wr.updateSIDForSubsystemBuild("Outport", i, sid);

    end

